name: Cross-platform Build & Package
on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  # Linux and Windows builds
  build-linux-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
          - os: windows
            arch: arm64
    name: Build for ${{ matrix.os }}/${{ matrix.arch }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Install go-bindata
        run: |
          go install github.com/go-bindata/go-bindata/v3/go-bindata@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Generate bindata files
        run: |
          go-bindata -o internal/util/access.go -pkg util static/... templates/... cache/...
      
      - name: Build binary
        run: |
          OUTPUT_NAME=your-app
          EXT=""
          if [ "${{ matrix.os }}" = "windows" ]; then EXT=".exe"; fi
          mkdir -p dist/${{ matrix.os }}-${{ matrix.arch }}
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o dist/${{ matrix.os }}-${{ matrix.arch }}/$OUTPUT_NAME$EXT cmd/main.go
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: dist/${{ matrix.os }}-${{ matrix.arch }}/

  # macOS builds using native runner
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    name: Build for darwin/${{ matrix.arch }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
      
      - name: Install go-bindata
        run: |
          go install github.com/go-bindata/go-bindata/v3/go-bindata@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Generate bindata files
        run: |
          go-bindata -o internal/util/access.go -pkg util static/... templates/... cache/...
      
      - name: Build binary
        run: |
          OUTPUT_NAME=your-app
          mkdir -p dist/darwin-${{ matrix.arch }}
          GOOS=darwin GOARCH=${{ matrix.arch }} go build -o dist/darwin-${{ matrix.arch }}/$OUTPUT_NAME cmd/main.go
      
      - name: Install create-dmg
        run: |
          npm install -g create-dmg
      
      - name: Package for macOS (DMG)
        run: |
          APP_NAME=your-app
          
          # Create app structure
          mkdir -p $APP_NAME.app/Contents/MacOS
          mkdir -p $APP_NAME.app/Contents/Resources
          
          # Copy binary
          cp dist/darwin-${{ matrix.arch }}/$APP_NAME $APP_NAME.app/Contents/MacOS/
          chmod +x $APP_NAME.app/Contents/MacOS/$APP_NAME
          
          # Create Info.plist
          cat > $APP_NAME.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>$APP_NAME</string>
              <key>CFBundleIdentifier</key>
              <string>com.example.$APP_NAME</string>
              <key>CFBundleName</key>
              <string>$APP_NAME</string>
              <key>CFBundleVersion</key>
              <string>1.0.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.12</string>
          </dict>
          </plist>
          EOF
          
          # Create DMG using create-dmg
          create-dmg \
            --volname "$APP_NAME" \
            --volicon "$APP_NAME.app/Contents/Resources/icon.icns" \
            --window-pos 200 120 \
            --window-size 600 300 \
            --icon-size 100 \
            --icon "$APP_NAME.app" 175 120 \
            --hide-extension "$APP_NAME.app" \
            --app-drop-link 425 120 \
            "dist/darwin-${{ matrix.arch }}.dmg" \
            "$APP_NAME.app" || \
          # Fallback: use hdiutil if create-dmg fails
          hdiutil create -volname "$APP_NAME" -srcfolder "$APP_NAME.app" -ov -format UDZO "dist/darwin-${{ matrix.arch }}.dmg"
      
      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.arch }}-dmg
          path: dist/darwin-${{ matrix.arch }}.dmg
